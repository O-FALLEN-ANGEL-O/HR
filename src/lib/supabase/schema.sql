-- Drop existing tables in reverse order of dependency to avoid foreign key constraints errors.
DROP TABLE IF EXISTS "public"."applicant_notes";
DROP TABLE IF EXISTS "public"."time_off_requests";
DROP TABLE IF EXISTS "public"."performance_reviews";
DROP TABLE IF EXISTS "public"."onboarding_workflows";
DROP TABLE IF EXISTS "public"."interviews";
DROP TABLE IF EXISTS "public"."applicants";
DROP TABLE IF EXISTS "public"."colleges";
DROP TABLE IF EXISTS "public"."jobs";
DROP TABLE IF EXISTS "public"."metrics";


-- Create Metrics Table
CREATE TABLE IF NOT EXISTS public.metrics (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title text NOT NULL,
    value text NOT NULL,
    change text,
    change_type text
);
ALTER TABLE public.metrics ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read-only access" ON public.metrics FOR SELECT USING (true);


-- Create Jobs Table
CREATE TABLE IF NOT EXISTS public.jobs (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    title text NOT NULL,
    department text NOT NULL,
    description text,
    status text DEFAULT 'Open'::text NOT NULL,
    applicants integer DEFAULT 0 NOT NULL,
    posted_date timestamptz DEFAULT now() NOT NULL
);
ALTER TABLE public.jobs ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read-only access" ON public.jobs FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to manage jobs" ON public.jobs FOR ALL USING (auth.role() = 'authenticated');


-- Create Colleges Table
CREATE TABLE IF NOT EXISTS public.colleges (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    name text NOT NULL,
    status text DEFAULT 'Invited'::text NOT NULL,
    resumes_received integer DEFAULT 0 NOT NULL,
    contact_email text,
    last_contacted timestamptz DEFAULT now() NOT NULL
);
ALTER TABLE public.colleges ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read-only access" ON public.colleges FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to manage colleges" ON public.colleges FOR ALL USING (auth.role() = 'authenticated');


-- Create Applicants Table
CREATE TABLE IF NOT EXISTS public.applicants (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    name text NOT NULL,
    email text NOT NULL,
    phone text,
    job_id uuid REFERENCES public.jobs(id) ON DELETE SET NULL,
    stage text DEFAULT 'Applied'::text NOT NULL,
    applied_date timestamptz DEFAULT now() NOT NULL,
    avatar text,
    source text,
    wpm integer,
    accuracy integer,
    aptitude_score integer,
    college_id uuid REFERENCES public.colleges(id) ON DELETE SET NULL,
    resume_data jsonb,
    ai_match_score integer,
    ai_justification text
);
ALTER TABLE public.applicants ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow anonymous users to create applicants" ON public.applicants FOR INSERT WITH CHECK (true);
CREATE POLICY "Allow public read access" ON public.applicants FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to manage applicants" ON public.applicants FOR ALL USING (auth.role() = 'authenticated');


-- Create Applicant Notes Table
CREATE TABLE IF NOT EXISTS public.applicant_notes (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    applicant_id uuid NOT NULL REFERENCES public.applicants(id) ON DELETE CASCADE,
    author_name text NOT NULL,
    author_avatar text,
    note text NOT NULL,
    created_at timestamptz DEFAULT now() NOT NULL
);
ALTER TABLE public.applicant_notes ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage notes" ON public.applicant_notes FOR ALL USING (auth.role() = 'authenticated');


-- Create Interviews Table
CREATE TABLE IF NOT EXISTS public.interviews (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    candidate_name text NOT NULL,
    candidate_avatar text,
    job_title text,
    interviewer_name text NOT NULL,
    interviewer_avatar text,
    date timestamptz NOT NULL,
    time text NOT NULL,
    type text NOT NULL,
    status text DEFAULT 'Scheduled'::text NOT NULL
);
ALTER TABLE public.interviews ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read-only access" ON public.interviews FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to manage interviews" ON public.interviews FOR ALL USING (auth.role() = 'authenticated');


-- Create Onboarding Workflows Table
CREATE TABLE IF NOT EXISTS public.onboarding_workflows (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    employee_name text NOT NULL,
    employee_avatar text,
    job_title text,
    manager_name text,
    buddy_name text,
    progress integer DEFAULT 0 NOT NULL,
    current_step text,
    start_date timestamptz DEFAULT now() NOT NULL
);
ALTER TABLE public.onboarding_workflows ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read-only access" ON public.onboarding_workflows FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to manage onboarding" ON public.onboarding_workflows FOR ALL USING (auth.role() = 'authenticated');


-- Create Performance Reviews Table
CREATE TABLE IF NOT EXISTS public.performance_reviews (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    employee_name text NOT NULL,
    employee_avatar text,
    job_title text,
    review_date text NOT NULL,
    status text DEFAULT 'Pending'::text NOT NULL
);
ALTER TABLE public.performance_reviews ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read-only access" ON public.performance_reviews FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to manage reviews" ON public.performance_reviews FOR ALL USING (auth.role() = 'authenticated');


-- Create Time Off Requests Table
CREATE TABLE IF NOT EXISTS public.time_off_requests (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    employee_name text NOT NULL,
    employee_avatar text,
    type text NOT NULL,
    start_date timestamptz NOT NULL,
    end_date timestamptz NOT NULL,
    status text DEFAULT 'Pending'::text NOT NULL
);
ALTER TABLE public.time_off_requests ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read-only access" ON public.time_off_requests FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to manage time off" ON public.time_off_requests FOR ALL USING (auth.role() = 'authenticated');


-- Create Storage Bucket for Avatars
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES ('avatars', 'avatars', true, 5242880, ARRAY['image/png', 'image/jpeg', 'image/gif'])
ON CONFLICT (id) DO UPDATE SET public = true, file_size_limit = 5242880, allowed_mime_types = ARRAY['image/png', 'image/jpeg', 'image/gif'];


-- Set up Security Policies for Avatars Bucket
-- Allow public read access
CREATE POLICY "Public read access for avatars" ON storage.objects
FOR SELECT USING (bucket_id = 'avatars');

-- Allow anonymous users to upload avatars
CREATE POLICY "Allow anonymous avatar uploads" ON storage.objects
FOR INSERT WITH CHECK (bucket_id = 'avatars');

-- Allow authenticated users to update their own avatar
CREATE POLICY "Allow authenticated users to update avatars" ON storage.objects
FOR UPDATE USING (auth.role() = 'authenticated') WITH CHECK (bucket_id = 'avatars');
